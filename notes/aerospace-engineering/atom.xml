<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Thomas Antony - Aerospace Engineering</title>
	<subtitle>My personal website and notes</subtitle>
	<link href="https://thomasantony.com/notes/aerospace-engineering/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://thomasantony.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-10-14T03:14:56.441+00:00</updated>
	<id>https://thomasantony.com/notes/aerospace-engineering/atom.xml</id>
	<entry xml:lang="en">
		<title>Generating Perpendicular Basis Vectors in a Plane</title>
		<published>2022-10-14T03:14:56.441+00:00</published>
		<updated>2022-10-14T03:14:56.441+00:00</updated>
		<link rel="alternate" href="https://thomasantony.com/notes/202209132014-generating-perpendicular-basis-vectors-in-a-plane/" type="text/html"/>
		<id>https://thomasantony.com/notes/202209132014-generating-perpendicular-basis-vectors-in-a-plane/</id>
		<content type="html">&lt;p&gt;This is an easier&#x2F;less computationally expensive method compared &lt;a href=&quot;@notes&#x2F;202207231849_points-in-a-plane-using-null-space.md&quot;&gt;Points in a plane using null space&lt;&#x2F;a&gt; to generate a pair of orthogonal vector for a given unit vector. This is based on the the &lt;a href=&quot;@notes&#x2F;202209132012_cross-product-by-matrix-multiplication.md&quot;&gt;Cross Product By Matrix Multiplication&lt;&#x2F;a&gt; method.&lt;&#x2F;p&gt;
&lt;p&gt;We start with the unit vector $\mathbf{u}$, normal to the plane of interest. We compute the cross product matrix $U_\times$ as:&lt;&#x2F;p&gt;
&lt;div&gt;
    $$
U_\times = \begin{bmatrix}
0    &amp;amp; -u_3 &amp;amp; u_2\\
u_3  &amp;amp; 0  &amp;amp; -u_1\\
-u_2 &amp;amp; u_1 &amp;amp; 0
\end{bmatrix}
$$
&lt;&#x2F;div&gt;
&lt;p&gt;where $u_1$, $u_2$ and $u_3$ are the components of $\mathbf{u}$. Since $\mathbf{u}$ is a non-null unit vector, either the first or the second column of $U_\times$ will be a non-null vector. This vector will also be perpendicular to $\mathbf{u}$. This can be verified by the dot product: &lt;&#x2F;p&gt;
&lt;div&gt;
    $$
(\text{Column 1}) \cdot \mathbf{u} = u_3 u_2 - u_2 * u_3 = 0 \\
(\text{Column 2}) \cdot \mathbf{u} = -u_3 u_1 + u_1 * u_3 = 0 \\
$$
&lt;&#x2F;div&gt;
&lt;p&gt;We pick the first of the orthogonal vectors, $\mathbf{v}$ as either the first or second column of $U_\times$, depending on whichever one is non-null. The second orthogonal vector is computed as:&lt;&#x2F;p&gt;
&lt;div&gt;
    $$
\mathbf{w} = \mathbf{u} \times \mathbf{v}
$$
&lt;&#x2F;div&gt;
&lt;p&gt;Linear combinations of $\mathbf{v}$ and $\mathbf{w}$ can be used to generate vectors in the plane normal to $\mathbf{u}$.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bdot attitude controller</title>
		<published>2022-09-15T01:34:31.565+00:00</published>
		<updated>2022-09-15T01:34:31.565+00:00</updated>
		<link rel="alternate" href="https://thomasantony.com/notes/202208141834-bdot-attitude-controller/" type="text/html"/>
		<id>https://thomasantony.com/notes/202208141834-bdot-attitude-controller/</id>
		<content type="html">&lt;p&gt;A “bdot” (or $\mathbf{\dot{B}}$) attitude controller is used to detumble a spacecraft using just a magnetometer and torque rods. It does not require any other rate-sensing instruments like gyros. The controller is usually implemented as a derivative controller acting on the sensed magnetic field $\mathbf{B}$. The control torque in the body frame is defined as:&lt;&#x2F;p&gt;
&lt;div&gt;
    $$
\tau_x = - \frac{k_x \mathbf{\dot{B}}_x}{|\mathbf{B}|}, \quad
\tau_y = - \frac{k_y \mathbf{\dot{B}}_y}{|\mathbf{B}|}, \quad
\tau_z = - \frac{k_z \mathbf{\dot{B}}_y}{|\mathbf{B}|}
$$
&lt;&#x2F;div&gt;
&lt;p&gt;where $\mathbf{\dot{B}}_i$ is the component of the derivative of $\mathbf{B}$ about the $i$ axis. $\mathbf{\dot{B}}$ is computed using a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Smooth Low Noise Differentiators&quot; href=&quot;http:&#x2F;&#x2F;www.holoborodko.com&#x2F;pavel&#x2F;numerical-methods&#x2F;numerical-derivative&#x2F;smooth-low-noise-differentiators&#x2F;&quot;&gt;digital differentiator filter&lt;&#x2F;a&gt; from discrete samples of $\mathbf{B}$.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This method will obviously only work when the spacecraft is operating within a magnetic field (e.g. in near-Earth space)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The sampling cadence should be set up such that the use of the torque rods do not cause errors in magnetometer measurements. This can be ensured by sampling the data when the torque rods are not energized. That should also be sufficient delay after the rods are turned off in order to avoid residual effects from the rods’ magnetic fields.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Points in a plane using null space</title>
		<published>2022-08-24T01:49:19.119+00:00</published>
		<updated>2022-08-24T01:49:19.119+00:00</updated>
		<link rel="alternate" href="https://thomasantony.com/notes/202207231849-points-in-a-plane-using-null-space/" type="text/html"/>
		<id>https://thomasantony.com/notes/202207231849-points-in-a-plane-using-null-space/</id>
		<content type="html">&lt;p&gt;A plane can be defined using its normal vector &lt;code&gt;n&lt;&#x2F;code&gt;. Points in the plane represented by this vector can be generated by first computing the null space of this vector. This gives the two basis vectors (assuming 3D space) for the plane. These basis vectors can then be scaled as necessary to generate points. For example, to generate a circle of points in a plane:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;scipy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;sp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;scipy.linalg
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;n = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;plane_basis = sp.linalg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;null_space&lt;&#x2F;span&gt;&lt;span&gt;([n])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;numPoints = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;theta = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;linspace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*np.pi, numPoints+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;x = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;(theta[:-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;y = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span&gt;(theta[:-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# points is a 3xnumPoints matrix where each column is a point
&lt;&#x2F;span&gt;&lt;span&gt;points = plane_basis @ np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;([x, y])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An easier&#x2F;less expensive method can be found at [[202209132014_generating-perpendicular-basis-vectors-in-a-plane]]&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Allocating Torques to Reaction Wheels</title>
		<published>2022-08-20T01:49:19.119+00:00</published>
		<updated>2022-08-20T01:49:19.119+00:00</updated>
		<link rel="alternate" href="https://thomasantony.com/notes/202207231848-allocating-torques-to-reaction-wheels/" type="text/html"/>
		<id>https://thomasantony.com/notes/202207231848-allocating-torques-to-reaction-wheels/</id>
		<content type="html">&lt;p&gt;Allocating torques to RWAs are accomplished by first defining a “distribution matrix” which contains the spin axes of the individual wheels, and then using this matrix to allocate torques.Each column of the distribution matrix consists of the unit vector for the spin axis of one wheel, resulting in a 3xN matrix for an RWA with N wheels.&lt;&#x2F;p&gt;
&lt;p&gt;In general:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;tau_RWA = rwaMatrixInv * tau_b + alpha * rwaNullSpace
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;tau_b&lt;&#x2F;code&gt; is the required torque in the body frame, &lt;code&gt;rwaMatrixInv&lt;&#x2F;code&gt; is the inverse of the distribution matrix, &lt;code&gt;alpha&lt;&#x2F;code&gt; is a row vector of size &lt;code&gt;m&lt;&#x2F;code&gt; where &lt;code&gt;m&lt;&#x2F;code&gt; is the nullity of &lt;code&gt;rwaMatrix&lt;&#x2F;code&gt; .&lt;&#x2F;p&gt;
&lt;p&gt;For a three wheel system, the null space is empty and therefore the second term of the above expression does not apply.There is a unique solution to allocate any torques for a properly oriented RWA.The solution is the one that minimizes the L2 norm of the allocated torques and is a unique solution.&lt;&#x2F;p&gt;
&lt;p&gt;For RWAs with  more than three wheels, the null-space presents flexibility in allocating torques to satisfy various conditions.If &lt;code&gt;alpha&lt;&#x2F;code&gt; is selected as a zero vector, the solution minimizes the L2-norm of the allocated torques.&lt;code&gt;alpha&lt;&#x2F;code&gt; can be selected to further optimize the allocation to satisfy other conditions.Minimizing the L-infinity norm of hte torque better uses the capacity of the RWA.However, computing alpha in the general case is non-trivial.Ref [1] describes a method for minimizing the L-infinity norm for four-wheel RWAs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;four-wheel-reaction-wheel-allocator-for-pyramid-configurations&quot;&gt;Four wheel reaction wheel allocator for pyramid configurations&lt;&#x2F;h2&gt;
&lt;p&gt;For a four wheel system, the nullity of &lt;code&gt;rwaMatrix&lt;&#x2F;code&gt; is equal to one and hence &lt;code&gt;alpha&lt;&#x2F;code&gt; is a scalar.i.e.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;tau_L2 = rwaMatrixInv * tau_b
&lt;&#x2F;span&gt;&lt;span&gt;tau_Linf = tau_L2 + alpha * tau_null
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;tau_null&lt;&#x2F;code&gt; is the null space of &lt;code&gt;rwaMatrix&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For symmetric 4 wheel configurations, &lt;code&gt;tau_null&lt;&#x2F;code&gt; is equal to &lt;code&gt;[1, 1, 1, 1]&lt;&#x2F;code&gt; and the value of alpha can be computed as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;alpha = - (min(tau_L2) + max(tau_L2))&#x2F;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For non-symmetric pyramid configurations, a different method is used where six separate values are computed as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;alpha_1 = - (tau_L2(1) + tau_L2(2)) &#x2F; ( tau_null(1) + tau_null(2) )
&lt;&#x2F;span&gt;&lt;span&gt;alpha_2 = - (tau_L2(1) + tau_L2(3)) &#x2F; ( tau_null(1) + tau_null(3) )
&lt;&#x2F;span&gt;&lt;span&gt;alpha_3 = - (tau_L2(1) + tau_L2(4)) &#x2F; ( tau_null(1) + tau_null(4) )
&lt;&#x2F;span&gt;&lt;span&gt;alpha_4 = - (tau_L2(2) + tau_L2(3)) &#x2F; ( tau_null(2) + tau_null(3) )
&lt;&#x2F;span&gt;&lt;span&gt;alpha_5 = - (tau_L2(2) + tau_L2(4)) &#x2F; ( tau_null(2) + tau_null(4) )
&lt;&#x2F;span&gt;&lt;span&gt;alpha_6 = - (tau_L2(3) + tau_L2(4)) &#x2F; ( tau_null(3) + tau_null(4) )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The value of alpha that gives the smallest maximum absolute value of &lt;code&gt;tau_rwa&lt;&#x2F;code&gt; is selected.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The above algorthms assume that the null space of &lt;code&gt;rwaMatrix&lt;&#x2F;code&gt; is entirely positive (or equal to &lt;code&gt;[1, 1, 1, 1]&lt;&#x2F;code&gt; in case of symmetric RWAs).However, it is possible that some of these may be negative based on how the axes are oriented.In this case, the sign of the corresponding column in &lt;code&gt;rwaMatrix&lt;&#x2F;code&gt; is the be negated and the direction of the torque allocated for that particular wheel has to be reversed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;[1] “Optimal uses of reaction wheels in the pyramid configuration using a new minimum infinity-norm solution”, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.researchgate.net&#x2F;publication&#x2F;265687712_Optimal_uses_of_reaction_wheels_in_the_pyramid_configuration_using_a_new_minimum_infinity-norm_solution&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Attitude Control using Reaction Wheels</title>
		<published>2022-05-19T05:47:36.416+00:00</published>
		<updated>2022-05-19T05:47:36.416+00:00</updated>
		<link rel="alternate" href="https://thomasantony.com/notes/202204182247-attitude-control-using-reaction-wheels/" type="text/html"/>
		<id>https://thomasantony.com/notes/202204182247-attitude-control-using-reaction-wheels/</id>
		<content type="html">&lt;p&gt;Reactions wheels are used for controlling spacecraft attitude to a very high precision. It works by using an electric motor to spin a flywheel that causes the spacecraft to rotate in the opposite direction. A set of three orthogonally arranged reaction wheels can fully control the spacecraft attitude. In an isolated system, a reaction wheel assembly (RWA) can be used indefinitely without requiring any energy input other than power for the motors. However, disturbance torques add energy into the system, causing the angular momentum of the wheels to increase. When they get saturated, some other source of torque, such as RCS thrusters or torque-rods need to be used to desaturate them.&lt;&#x2F;p&gt;
&lt;p&gt;Torque allocation to a 3-wheel system can be accomplished by projecting the torque vector to each individual spin axis via a dot product. With more than three wheels, the added degrees of freedom results in an infinite number of possible solutions. The optimal solution in this case is picked by one of the following strategies. More generalized strategies are available for &lt;a href=&quot;https:&#x2F;&#x2F;thomasantony.com&#x2F;notes&#x2F;202207231848-allocating-torques-to-reaction-wheels&#x2F;&quot;&gt;allocating torques&lt;&#x2F;a&gt; in systems with more than three reaction wheels [1].&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;[1] Section 4.3.8, “Fundamentals of Spacecraft Attitude Determination and Control”, Markley, F. L. and Crassidis, J. L., &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>TRIAD Algorithm For Attitude Determination</title>
		<published>2022-04-04T03:13:13.208+00:00</published>
		<updated>2022-04-04T03:13:13.208+00:00</updated>
		<link rel="alternate" href="https://thomasantony.com/notes/202203032013-triad-algorithm-for-attitude-determination/" type="text/html"/>
		<id>https://thomasantony.com/notes/202203032013-triad-algorithm-for-attitude-determination/</id>
		<content type="html">&lt;p&gt;The TRIAD or Tri-Axial Attitude Determination algorithm is used for attitude determination given two body-frame vectors ($b_1$ and $b_2$) and two corresponding inertial or “reference” frame vectors ($r_1$ and $r_2$). The attitude is determined as an “Attitude matrix”, $\mathbf{A}$, which is the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Direction Cosine Matrix&quot; href=&quot;https:&#x2F;&#x2F;en.wikiversity.org&#x2F;wiki&#x2F;PlanetPhysics&#x2F;Direction_Cosine_Matrix&quot;&gt;DCM&lt;&#x2F;a&gt; that rotates the vectors from the reference frame to the body frame.&lt;&#x2F;p&gt;
&lt;p&gt;The first vector is assumed to have more accurate measurement and so the algorithm is set up such that the estimate satisfies $\mathbf{A} r_1 = b_1$, exactly and $\mathbf{A} r_2 = b_2$ only approximately.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;algorithm&quot;&gt;Algorithm&lt;&#x2F;h2&gt;
&lt;p&gt;The TRIAD algorithm forms the orthogonal triads, {$v_1$, $v_2$, $v_3$} from $r_1$ and $r_2$ and {$w_1$, $w_2$, $w_3$} from $b_1$ and $b_2$, respectively.&lt;&#x2F;p&gt;
&lt;div&gt;
    $$
\begin{align}
v_1 &amp;amp;= r_1,&amp;amp;\quad v_2 = r_x = \frac{r_1 \times r_2}{||r_1 \times r_1||},&amp;amp; \quad &amp;amp;v_3 = r_1 &amp;amp;\times r_x&amp;amp; \\
w_1 &amp;amp;= b_1,&amp;amp;\quad w_2 = b_x = \frac{b_1 \times b_2}{||b_1 \times b_1||},&amp;amp; \quad &amp;amp;w_3 = b_1 &amp;amp;\times b_x&amp;amp;
\end{align}
$$
&lt;&#x2F;div&gt;
&lt;p&gt;The estimate of A is given by:
$$
\mathbf{A} = w_1 v_1^\intercal + w_3 v_3^\intercal + w_2 v_2^\intercal
$$&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
