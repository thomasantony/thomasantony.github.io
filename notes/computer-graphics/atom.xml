<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>thomasantony.com - Computer Graphics</title>
	<subtitle>My personal website and notes</subtitle>
	<link href="https://www.thomasantony.com/notes/computer-graphics/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://www.thomasantony.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2023-11-16T02:42:56.608+00:00</updated>
	<id>https://www.thomasantony.com/notes/computer-graphics/atom.xml</id>
	<entry xml:lang="en">
		<title>Fragment Shaders</title>
		<published>2023-11-16T02:42:56.608+00:00</published>
		<updated>2023-11-16T02:42:56.608+00:00</updated>
		<link rel="alternate" href="https://www.thomasantony.com/notes/202310151842-fragment-shaders/" type="text/html"/>
		<id>https://www.thomasantony.com/notes/202310151842-fragment-shaders/</id>
		<content type="html">&lt;p&gt;A fragment shader is a program that is part of a rendering pipeline&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Fragment&quot;&gt;1&lt;&#x2F;a&gt; which takes as input a fragment (generated by rasterizing the outputs of a &lt;a href=&quot;@notes&#x2F;202310151836_vertex_shaders&quot;&gt;vertex shader&lt;&#x2F;a&gt;) and outputs a pixel color value and depth.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;[&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Fragment&quot;&gt;1&lt;&#x2F;a&gt;] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Fragment&quot;&gt;Fragment Shader - OpenGL Wiki&lt;&#x2F;a&gt;
[&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Fragment_Shader&quot;&gt;2&lt;&#x2F;a&gt;] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Fragment_Shader&quot;&gt;Fragment Shader - OpenGL Wiki&lt;&#x2F;a&gt;
[&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Rendering_Pipeline_Overview&quot;&gt;3&lt;&#x2F;a&gt;] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Rendering_Pipeline_Overview&quot;&gt;Rendering Pipeline Overview - OpenGL Wiki&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vertex Shaders</title>
		<published>2023-11-16T02:36:56.132+00:00</published>
		<updated>2023-11-16T02:36:56.132+00:00</updated>
		<link rel="alternate" href="https://www.thomasantony.com/notes/202310151836-vertex-shaders/" type="text/html"/>
		<id>https://www.thomasantony.com/notes/202310151836-vertex-shaders/</id>
		<content type="html">&lt;p&gt;A vertex shader is a program that runs on the GPU that is one of the stages in a “rendering pipeline” (e.g. the OpenGL rendering pipelline&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Rendering_Pipeline_Overview&quot;&gt;2&lt;&#x2F;a&gt;). It is typically written ina special programming language such as GLSL&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;OpenGL_Shading_Language&quot;&gt;3&lt;&#x2F;a&gt; or WGSL&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;google.github.io&#x2F;tour-of-wgsl&#x2F;&quot;&gt;4&lt;&#x2F;a&gt;. The job of a vertex shader is to take a single vertex as input and output a single vertex (usually in 4D homogenous coordinates), in “clip-space”, after doing some user-defined transformation on it. It may also generate other user-defined outputs.&lt;&#x2F;p&gt;
&lt;p&gt;The rendering pipeline takes these outputs and the output vertex and then interpolates them to generate values for points between two vertices (e.g. on a triangle formed by three vertices). These are called “Fragments”. The pipeline then eventually calls the &lt;a href=&quot;https:&#x2F;&#x2F;www.thomasantony.com&#x2F;notes&#x2F;202310151842-fragment-shaders&#x2F;&quot;&gt;fragment shader&lt;&#x2F;a&gt; to generate pixels (of some color) corresponding to these fragments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;[&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Vertex_Shader&quot;&gt;1&lt;&#x2F;a&gt;] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Vertex_Shader&quot;&gt;Vertex Shader - OpenGL Wiki&lt;&#x2F;a&gt;
[&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Rendering_Pipeline_Overview&quot;&gt;2&lt;&#x2F;a&gt;] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengl&#x2F;wiki&#x2F;Rendering_Pipeline_Overview&quot;&gt;Rendering Pipeline Overview - OpenGL Wiki&lt;&#x2F;a&gt;
[&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;OpenGL_Shading_Language&quot;&gt;3&lt;&#x2F;a&gt;] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;OpenGL_Shading_Language&quot;&gt;GLSL&lt;&#x2F;a&gt;
[&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;google.github.io&#x2F;tour-of-wgsl&#x2F;&quot;&gt;4&lt;&#x2F;a&gt;] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;google.github.io&#x2F;tour-of-wgsl&#x2F;&quot;&gt;WebGPU Shading Language&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
