<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Thomas Antony</title><link>https://www.thomasantony.com/posts/</link><description>Recent content in Posts on Thomas Antony</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 10 Jan 2022 23:49:12 -0600</lastBuildDate><atom:link href="https://www.thomasantony.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Orbiter Addon Development in Rust</title><link>https://www.thomasantony.com/2022/orbiter-addon-rust/</link><pubDate>Mon, 10 Jan 2022 23:49:12 -0600</pubDate><guid>https://www.thomasantony.com/2022/orbiter-addon-rust/</guid><description>This short article will explore how to create a spacecraft addon for the Orbiter spaceflight simulator in the Rust programming language. I previously took a stab at this back in 2020 with limited success. I was much less knowledgeable about Rust at the time and the tooling around C++ bindings were not as mature then. This post is a companion to this new repository that contains a proof-of-concept for building a spacecraft addon for Orbiter in Rust.</description></item><item><title>Deriving the MSL/Apollo Entry Guidance Algorithm</title><link>https://www.thomasantony.com/2021/msl-apollo-guidance/</link><pubDate>Thu, 19 Aug 2021 15:05:51 -0500</pubDate><guid>https://www.thomasantony.com/2021/msl-apollo-guidance/</guid><description>This post is a companion to the video linked above and includes a full derivation of the Apollo entry guidance longitudinal control algorithm. Please watch the video for more context. Full source code of Jupyter notebooks implementing the algorithm can be found at https://github.com/thomasantony/msl-apollo-entry-guidance.
NASA&amp;rsquo;s Mars Science Laboratory mission showcased an advancement in entry technology that allowed it to land much closer to its designated landing site than previous missions.</description></item><item><title>Setting up the Orbiter 2016 SDK in Visual Studio 2019</title><link>https://www.thomasantony.com/2020/orbiter-sdk-vs-2019/</link><pubDate>Sat, 08 Aug 2020 12:39:52 -0500</pubDate><guid>https://www.thomasantony.com/2020/orbiter-sdk-vs-2019/</guid><description>Orbiter is to space flight, what X-Plane is to aviation. Orbiter has been around since the early 2000s and it seems like some of the documentation for add-on development is a bit out-dated. This post documents how to get an Orbiter 2016 addon development environment set-up on Windows 10, using tools available today (in 2020).
Download Orbiter 2016 Download and install Orbiter following instructions at http://orbit.medphys.ucl.ac.uk/download.html. &amp;ldquo;TexFilms&amp;rdquo; on Youtube has a very good video detailing how to install Orbiter 2016 along with some essential add-ons.</description></item><item><title>Hello World!</title><link>https://www.thomasantony.com/2019/2019-10-16-hello-world/</link><pubDate>Wed, 16 Oct 2019 20:47:55 -0500</pubDate><guid>https://www.thomasantony.com/2019/2019-10-16-hello-world/</guid><description>8/8/2020 update: I have imported some of my older articles from Medium to this blog to consolidate everything in one spot. So this particular &amp;ldquo;hello world&amp;rdquo; appearing in the middle of other posts may look a bit weird.
10/16/2019:
Yes. I have started a blog &amp;hellip; again. This is probably my fourth attempt at creating a personal website. And as usual, I spent several hours looking at themes/templates before finally settling on this one.</description></item><item><title>Using VirtualCAN inside docker on macOS</title><link>https://www.thomasantony.com/2018/virtual-can-docker-macos/</link><pubDate>Fri, 09 Feb 2018 03:42:31 +0000</pubDate><guid>https://www.thomasantony.com/2018/virtual-can-docker-macos/</guid><description>At SmartAg, we use Docker to manage the development and runtime environments for our embedded software. For performing full-system integrated tests, we have built comprehensive simulators that mimic the behavior of the hardware that we automate. Since most of the hardware communication happens over CAN, VirtualCAN is a great way of faking the hardware signals.
Until now, any code that required a CAN interface could not run on my Macbook Pro.</description></item><item><title>Training a neural network in real-time to control a self-driving car</title><link>https://www.thomasantony.com/2016/training-neural-net-for-sdc/</link><pubDate>Sun, 11 Dec 2016 05:02:01 +0000</pubDate><guid>https://www.thomasantony.com/2016/training-neural-net-for-sdc/</guid><description>I was lucky enough to be accepted into the first cohort of Udacity’s Self Driving Car NanoDegree program back in October. Though I have been thinking of blogging about my experience since the start, it didn’t really happen till now. I am currently wrapping up Project #3 — “Behavioral Cloning”. This one was considerably tougher than the first two. However, it has been very fulfilling to finally complete it and here I will describe the approach I used for training a neural network to drive a car (in a simulator).</description></item><item><title>flybywire — Declarative GUIs for Python inspired by React</title><link>https://www.thomasantony.com/2016/flybywire-declarative-gui-python/</link><pubDate>Sun, 04 Sep 2016 05:26:46 +0000</pubDate><guid>https://www.thomasantony.com/2016/flybywire-declarative-gui-python/</guid><description>Source: xkcd#970 by Randall Monroe
Python is amazing. I love the flexibility, the clean and readable syntax and its huge ecosystem of libraries. However, when it comes to making modern GUIs, it comes up sort in many ways.
There are libraries like PyQT and Kivy to create GUIs for your Python application. However, each of them come with their own problems. Many modern UI solutions like Electron and React-Native looks to the web to avoid the problems of dealing with multiple platforms.</description></item></channel></rss>